import java.lang.reflect.Field;
import java.security.InvalidParameterException;


public class ObjectUtil {

    public static void copyProperties(Object source, Object target, String[] properties) {
        //当properties参数为空数组时，throw java.security.InvalidParameterException 异常
        if (properties.length == 0) {
            throw new InvalidParameterException("properties为空");
        }
        for (String property : properties) {
            //source和target Object 可能是不同类型的class，但他们存在同名同类型的属性，就能进行拷贝
            try {
                Field sourceField = source.getClass().getDeclaredField(property);
                Field targetField = target.getClass().getDeclaredField(property);

                //当properties参数中的属性，在source和target中同名但类型不一致时，throw RuntimeException 异常
                if (!sourceField.getType().equals(targetField.getType())) {
                    throw new RuntimeException("类型不一致 " + property);
                }

                sourceField.setAccessible(true);
                targetField.setAccessible(true);
                Object value = sourceField.get(source);

                //如果是数组需要进行深拷贝
                if (value.getClass().isArray()) {
                    Object[] sourceArray = (Object[]) value;
                    Object[] targetArray = new Object[sourceArray.length];
                    for (int i = 0; i < sourceArray.length; i++) {
                        targetArray[i] = sourceArray[i];
                    }
                    targetField.set(target, targetArray);
                } else {
                    targetField.set(target, value);
                }

            } catch (NoSuchFieldException | IllegalAccessException e) {
                e.printStackTrace();
            }
        }
    }
}
